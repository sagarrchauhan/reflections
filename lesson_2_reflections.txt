What happens when you initialize a repository? Why do you need to do it?

	The timeline is set at the point the repository is created. Now any changes can be tracked by different file versions.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	Staging area allows only those files to be tracked whose contents we want to track when it gets changed. Thus the repository doesn't need to have any extra files whose history and data has to be maintained.

How can you use the staging area to make sure you have one commit per logical change?

	Only those files should be added to staging area whose changes are related to one logical change and then they should be commited.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Different versions(as in difficulty modes, new varying features, different language etc.) can be added.
	Branches help in maintaning the different versions of same game.(as defined above)

How do the diagrams help you visualize the branch structure?

	Helps us to understand which feature or variety of the application is available for committing or in current use.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	It results in a program having features of two or more branches. It is represented in the diagram to view the parent of each commit and how it has progressed till the end.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Automatic merging: Pro- do not have to worry about the merging of codes manually.
	Time is saved.
	Con - Doesn't always produce the desired result and can be buggy.

	Manual merging: Pro - Less chances of bugs
	Con - Consumes a lot of time. Conflicts aren't obvious initially.
